For this assignment, I'm rendering an entire scene only in the fragment shader, by ray-marching and SDF. I've found the SDF provided online only capable of placing a primitive mesh at the origin. So I go ahead and try to implement my own SDF function, which allows me to place a primitive anywhere in the scene. Such SDF for a sphere is easy to do, by simply subtracting the radius from the distance between the current marching point p and the sphere's center c. It took me a while to figure out the SDF for a box, with various length in the 3 directions. But by dividing it into multiple situations, I'm able to figure out the shortest distance from a point to the box mesh, and render the box.

The boolean operations for CSG are rather simple to implement. I decide to not render the previous-mentioned sphere, but still define it in the scene. I do this by excluding the distance to the sphere from the overall shortest distance. Finally, I animate the box by doing a cosine function with a timer uniform, and execute the "difference" boolean operation to the box, with the sphere's definition.
